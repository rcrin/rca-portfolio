{"ast":null,"code":"import _slicedToArray from \"C:\\\\Users\\\\Ramil Christian\\\\Desktop\\\\RCA-Portfolio\\\\rca-portfolio\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport { frame } from '../frameloop/index.mjs';\nimport { useRef, useEffect } from 'react';\nimport { useInstantLayoutTransition } from '../projection/use-instant-layout-transition.mjs';\nimport { useForceUpdate } from './use-force-update.mjs';\nimport { instantAnimationState } from './use-instant-transition-state.mjs';\nfunction useInstantTransition() {\n  var _useForceUpdate = useForceUpdate(),\n    _useForceUpdate2 = _slicedToArray(_useForceUpdate, 2),\n    forceUpdate = _useForceUpdate2[0],\n    forcedRenderCount = _useForceUpdate2[1];\n  var startInstantLayoutTransition = useInstantLayoutTransition();\n  var unlockOnFrameRef = useRef();\n  useEffect(function () {\n    /**\n     * Unblock after two animation frames, otherwise this will unblock too soon.\n     */\n    frame.postRender(function () {\n      return frame.postRender(function () {\n        /**\n         * If the callback has been called again after the effect\n         * triggered this 2 frame delay, don't unblock animations. This\n         * prevents the previous effect from unblocking the current\n         * instant transition too soon. This becomes more likely when\n         * used in conjunction with React.startTransition().\n         */\n        if (forcedRenderCount !== unlockOnFrameRef.current) return;\n        instantAnimationState.current = false;\n      });\n    });\n  }, [forcedRenderCount]);\n  return function (callback) {\n    startInstantLayoutTransition(function () {\n      instantAnimationState.current = true;\n      forceUpdate();\n      callback();\n      unlockOnFrameRef.current = forcedRenderCount + 1;\n    });\n  };\n}\nexport { useInstantTransition };","map":null,"metadata":{},"sourceType":"module"}