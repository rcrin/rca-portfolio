{"ast":null,"code":"import { createRenderStep } from './create-render-step.mjs';\nimport { frameData } from './data.mjs';\nvar maxElapsed = 40;\nvar useDefaultElapsed = true;\nvar runNextFrame = false;\nvar stepsOrder = [\"read\", \"update\", \"preRender\", \"render\", \"postRender\"];\nvar steps = stepsOrder.reduce(function (acc, key) {\n  acc[key] = createRenderStep(function () {\n    return runNextFrame = true;\n  });\n  return acc;\n}, {});\nvar processStep = function processStep(stepId) {\n  return steps[stepId].process(frameData);\n};\nvar processFrame = function processFrame(timestamp) {\n  runNextFrame = false;\n  frameData.delta = useDefaultElapsed ? 1000 / 60 : Math.max(Math.min(timestamp - frameData.timestamp, maxElapsed), 1);\n  frameData.timestamp = timestamp;\n  frameData.isProcessing = true;\n  stepsOrder.forEach(processStep);\n  frameData.isProcessing = false;\n  if (runNextFrame) {\n    useDefaultElapsed = false;\n    requestAnimationFrame(processFrame);\n  }\n};\nvar startLoop = function startLoop() {\n  runNextFrame = true;\n  useDefaultElapsed = true;\n  if (!frameData.isProcessing) requestAnimationFrame(processFrame);\n};\nvar frame = stepsOrder.reduce(function (acc, key) {\n  var step = steps[key];\n  acc[key] = function (process) {\n    var keepAlive = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n    var immediate = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : false;\n    if (!runNextFrame) startLoop();\n    return step.schedule(process, keepAlive, immediate);\n  };\n  return acc;\n}, {});\nfunction cancelFrame(process) {\n  stepsOrder.forEach(function (key) {\n    return steps[key].cancel(process);\n  });\n}\nexport { cancelFrame, frame, steps, stepsOrder };","map":null,"metadata":{},"sourceType":"module"}