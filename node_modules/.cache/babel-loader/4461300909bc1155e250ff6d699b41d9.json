{"ast":null,"code":"import { updateScrollInfo } from './info.mjs';\nimport { resolveOffsets } from './offsets/index.mjs';\nfunction _measure(container) {\n  var target = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : container;\n  var info = arguments.length > 2 ? arguments[2] : undefined;\n  /**\n   * Find inset of target within scrollable container\n   */\n  info.x.targetOffset = 0;\n  info.y.targetOffset = 0;\n  if (target !== container) {\n    var node = target;\n    while (node && node !== container) {\n      info.x.targetOffset += node.offsetLeft;\n      info.y.targetOffset += node.offsetTop;\n      node = node.offsetParent;\n    }\n  }\n  info.x.targetLength = target === container ? target.scrollWidth : target.clientWidth;\n  info.y.targetLength = target === container ? target.scrollHeight : target.clientHeight;\n  info.x.containerLength = container.clientWidth;\n  info.y.containerLength = container.clientHeight;\n}\nfunction createOnScrollHandler(element, onScroll, info) {\n  var options = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : {};\n  return {\n    measure: function measure() {\n      return _measure(element, options.target, info);\n    },\n    update: function update(time) {\n      updateScrollInfo(element, info, time);\n      if (options.offset || options.target) {\n        resolveOffsets(element, info, options);\n      }\n    },\n    notify: function notify() {\n      return onScroll(info);\n    }\n  };\n}\nexport { createOnScrollHandler };","map":null,"metadata":{},"sourceType":"module"}